[
    {
        "type": "number",
        "regexes": [
            "\\b\\d*\\.?\\d+\\b"
        ]
    },
    {
        "type": "variable",
        "regexes": [
            {
                "regexString": "(?:\\.|-&gt;)([a-zA-Z_][\\w-]*)\\b",
                "captureGroup": 1
            }
        ]
    },
    {
        "type": "import",
        "regexes": [
            {
                "regexString": "(?:#\\s*include)\\s+([\\w\\.&lt;&gt;]+)",
                "captureGroup": 1
            }
        ]
    },
    {
        "type": "function",
        "regexes": [
            "\\b[a-zA-Z_][\\w-]+?(?= *\\()"
        ]
    },
    {
        "type": "keyword",
        "regexes": [
            "\\balignas\\b",
            "\\balignof\\b",
            "\\band\\b",
            "\\band_eq\\b",
            "\\basm\\b",
            "\\batomic_cancel\\b",
            "\\batomic_commit\\b",
            "\\batomic_noexcept\\b",
            "\\bauto\\b",
            "\\bbitand\\b",
            "\\bbitor\\b",
            "\\bbool\\b",
            "\\bbreak\\b",
            "\\bcase\\b",
            "\\bcatch\\b",
            "\\bchar\\b",
            "\\bchar16_t\\b",
            "\\bchar32_t\\b",
            "\\bclass\\b",
            "\\bcompl\\b",
            "\\bconcept\\b",
            "\\bconst\\b",
            "\\bconstexpr\\b",
            "\\bconst_cast\\b",
            "\\bcontinue\\b",
            "\\bdecltype\\b",
            "\\bdefault\\b",
            "\\bdelete\\b",
            "\\bdo\\b",
            "\\bdouble\\b",
            "\\bdynamic_cast\\b",
            "\\belse\\b",
            "\\benum\\b",
            "\\bexplicit\\b",
            "\\bexport\\b",
            "\\bextern\\b",
            "\\bfloat\\b",
            "\\bfor\\b",
            "\\bfriend\\b",
            "\\bgoto\\b",
            "\\bif\\b",
            "\\binline\\b",
            "\\bint\\b",
            "\\bimport\\b",
            "\\blong\\b",
            "\\bmodule\\b",
            "\\bmutable\\b",
            "\\bnamespace\\b",
            "\\bnew\\b",
            "\\bnoexcept\\b",
            "\\bnot\\b",
            "\\bnot_eq\\b",
            "\\bnullptr\\b",
            "\\boperator\\b",
            "\\bor\\b",
            "\\bor_eq\\b",
            "\\bprivate\\b",
            "\\bprotected\\b",
            "\\bpublic\\b",
            "\\bregister\\b",
            "\\breinterpret_cast\\b",
            "\\brequires\\b",
            "\\breturn\\b",
            "\\bshort\\b",
            "\\bsigned\\b",
            "\\bsizeof\\b",
            "\\bstatic\\b",
            "\\bstatic_assert\\b",
            "\\bstatic_cast\\b",
            "\\bstruct\\b",
            "\\bswitch\\b",
            "\\bsynchronized\\b",
            "\\btemplate\\b",
            "\\bthis\\b",
            "\\bthread_local\\b",
            "\\bthrow\\b",
            "\\btry\\b",
            "\\btypedef\\b",
            "\\btypeid\\b",
            "\\btypename\\b",
            "\\btry\\b",
            "\\btry\\b",
            "\\btry\\b",
            "\\bunion\\b",
            "\\bunsigned\\b",
            "\\busing\\b",
            "\\bvirtual\\b",
            "\\bvoid\\b",
            "\\bvolatile\\b",
            "\\bwchar_t\\b",
            "\\bwhile\\b",
            "\\bxor\\b",
            "\\bxor_eq\\b",
            "\\boverride\\b",
            "\\bfinal\\b"
        ]
    },
    {
        "type": "literal-value",
        "regexes": [
            "\\btrue\\b",
            "\\bfalse\\b"
        ]
    },
    {
        "type": "class",
        "regexes": [
            {
                "regexString": "(?:class\\s)(\\w+)\\b",
                "captureGroup": 1
            }
        ]
    },
    {
        "type": "comment",
        "regexes": [
            "\\/\\/.+",
            "\\/\\*[\\S\\s]*?\\*\\/"
        ]
    },
    {
        "type": "wrapping",
        "regexes": [
            "\"(\\\\.|[^\"])*\"",
            "'(\\\\.|[^'])*'"
        ],
        "precedence": "comment"
    }
]
