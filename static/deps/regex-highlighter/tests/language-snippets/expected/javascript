<span class="regex-highlight comment">// GENERAL TESTING</span>
<span class="regex-highlight comment">/**
* A class for the Regex Highlighter
* @author Mark Hillman &lt;mark@markhillman.info&gt;
* @class
*
*   @param {string} [returnClassName] - The class name to add to the span tags
*       once a pattern has been matched
*/</span>
<span class="regex-highlight keyword">var</span> RegexHighlighter = <span class="regex-highlight keyword">function</span>(returnClassName) {
    <span class="regex-highlight keyword">this</span>.<span class="regex-highlight variable">returnClassName</span> = returnClassName;
    <span class="regex-highlight keyword">if</span> (<span class="regex-highlight keyword">typeof</span> <span class="regex-highlight keyword">this</span>.<span class="regex-highlight variable">returnClassName</span> === <span class="regex-highlight wrapping">"undefined"</span>)
        <span class="regex-highlight keyword">this</span>.<span class="regex-highlight variable">returnClassName</span> = <span class="regex-highlight wrapping">"regex-highlight"</span>;
}

<span class="regex-highlight comment">/**
* A function to sort the values of the passed in array, first by their indicies
* then by their precedence.
* @author Mark Hillman &lt;mark@markhillman.info&gt;
*
*   @param {Match[]} array - Array of regex match objects
*/</span>
RegexHighlighter.<span class="regex-highlight variable">prototype</span>.<span class="regex-highlight variable">sortArrayByObjectsIndex</span> = <span class="regex-highlight keyword">function</span>(array) {
    array.<span class="regex-highlight function">sort</span>(<span class="regex-highlight keyword">function</span> <span class="regex-highlight function">compareObj</span>(a, b) {
        <span class="regex-highlight keyword">if</span> (a.<span class="regex-highlight variable">index</span> == b.<span class="regex-highlight variable">index</span>)
            <span class="regex-highlight keyword">return</span> a.<span class="regex-highlight variable">precedence</span> - b.<span class="regex-highlight variable">precedence</span>;
        <span class="regex-highlight keyword">else</span>
            <span class="regex-highlight keyword">return</span> a.<span class="regex-highlight variable">index</span> - b.<span class="regex-highlight variable">index</span>;
    });
}

<span class="regex-highlight comment">/**
* Remove duplicate objects from the array using a function passed into this
* function. The array should contain Regex match objects and the shouldRemove
* function should work in a similar way to a compare function in most
* imperative languages. This means that &lt;0 will remove the item on the left,
* &gt;0 will remove the item on the right. 0 will not remove anything
* @author Mark Hillman &lt;mark@markhillman.info&gt;
*
*   @param {Match[]} array - The array which will have its duplicate items
*       removed from
*   @param {function} shouldRemove - A callback function to decide what will be removed
*/</span>
RegexHighlighter.<span class="regex-highlight variable">prototype</span>.<span class="regex-highlight variable">removeDuplicateObjectsFromArray</span> = <span class="regex-highlight keyword">function</span>(array, shouldRemove) {
    <span class="regex-highlight keyword">for</span> (<span class="regex-highlight keyword">var</span> i = <span class="regex-highlight number">1</span>; i &lt; array.<span class="regex-highlight variable">length</span>; i++) {
        <span class="regex-highlight keyword">var</span> side = <span class="regex-highlight function">shouldRemove</span>(array[i-<span class="regex-highlight number">1</span>], array[i]);
        <span class="regex-highlight keyword">if</span> (side != <span class="regex-highlight number">0</span>) {
            <span class="regex-highlight keyword">if</span> (side &lt; <span class="regex-highlight number">0</span>) {
                array.<span class="regex-highlight function">splice</span>(i-<span class="regex-highlight number">1</span>, <span class="regex-highlight number">1</span>);
                i--;
            }
            <span class="regex-highlight keyword">else</span> {
                array.<span class="regex-highlight function">splice</span>(i, <span class="regex-highlight number">1</span>);
                i--;
            }
        }
    }
}

<span class="regex-highlight keyword">function</span> <span class="regex-highlight function">withNumbers99</span>() {
    <span class="regex-highlight keyword">return</span> <span class="regex-highlight number">0</span>;
}

<span class="regex-highlight comment">// NUMBER TESTING</span>
<span class="regex-highlight number">1</span>
<span class="regex-highlight number">12</span>
<span class="regex-highlight number">1.1212</span>
<span class="regex-highlight number">1.121</span><span class="regex-highlight number">.12</span>
.<span class="regex-highlight number">12</span>
..<span class="regex-highlight number">121</span>
<span class="regex-highlight number">01</span>.

<span class="regex-highlight comment">// VARIABLE TESTING</span>
object.<span class="regex-highlight variable">hello</span>;
h.<span class="regex-highlight variable">x</span>;
h.<span class="regex-highlight variable">x</span>
object.<span class="regex-highlight variable">variable</span> = <span class="regex-highlight number">3</span>;
object.<span class="regex-highlight variable">variable</span>.<span class="regex-highlight variable">variable</span> = <span class="regex-highlight number">3</span>;
object.<span class="regex-highlight function">factorial</span>(<span class="regex-highlight number">2</span>);
.<span class="regex-highlight variable">variable</span>
x<span class="regex-highlight number">.1</span>
hello.1nf

<span class="regex-highlight comment">// FUNCTION TESTING</span>
<span class="regex-highlight keyword">this</span>.<span class="regex-highlight function">functionName</span>();
<span class="regex-highlight function">functionName</span>();
<span class="regex-highlight function">functionName</span>(args);
<span class="regex-highlight function">functionName</span>(<span class="regex-highlight function">functionName</span>());
<span class="regex-highlight function">functionName</span> ();
functionName
();
0functionName()

<span class="regex-highlight comment">// KEYWORDS</span>
<span class="regex-highlight keyword">do</span>, <span class="regex-highlight keyword">if</span>, <span class="regex-highlight keyword">in</span>, <span class="regex-highlight keyword">for</span>, <span class="regex-highlight keyword">let</span>, <span class="regex-highlight keyword">new</span>, <span class="regex-highlight keyword">try</span>, <span class="regex-highlight keyword">var</span>, <span class="regex-highlight keyword">case</span>, <span class="regex-highlight keyword">else</span>, <span class="regex-highlight keyword">enum</span>, <span class="regex-highlight keyword">eval</span>, <span class="regex-highlight keyword">this</span>, <span class="regex-highlight keyword">void</span>, <span class="regex-highlight keyword">with</span>, <span class="regex-highlight keyword">await</span>, <span class="regex-highlight keyword">break</span>, <span class="regex-highlight keyword">catch</span>, <span class="regex-highlight keyword">class</span>, <span class="regex-highlight keyword">const</span>, <span class="regex-highlight keyword">super</span>, <span class="regex-highlight keyword">throw</span>, <span class="regex-highlight keyword">while</span>, <span class="regex-highlight keyword">yield</span>, <span class="regex-highlight keyword">delete</span>, <span class="regex-highlight keyword">export</span>, <span class="regex-highlight keyword">import</span>, <span class="regex-highlight keyword">public</span>, <span class="regex-highlight keyword">return</span>, <span class="regex-highlight keyword">static</span>, <span class="regex-highlight keyword">switch</span>, <span class="regex-highlight keyword">typeof</span>, <span class="regex-highlight keyword">default</span>, <span class="regex-highlight keyword">extends</span>, <span class="regex-highlight keyword">finally</span>, <span class="regex-highlight keyword">package</span>, <span class="regex-highlight keyword">private</span>, <span class="regex-highlight keyword">continue</span>, <span class="regex-highlight keyword">debugger</span>, <span class="regex-highlight keyword">function</span>, <span class="regex-highlight keyword">arguments</span>, <span class="regex-highlight keyword">interface</span>, <span class="regex-highlight keyword">protected</span>, <span class="regex-highlight keyword">implements</span>, <span class="regex-highlight keyword">instanceof</span>

<span class="regex-highlight comment">// LITERAL VALUES</span>
<span class="regex-highlight literal-value">null</span>, <span class="regex-highlight literal-value">true</span>, <span class="regex-highlight literal-value">false</span>

<span class="regex-highlight comment">// CLASS TESTING</span>
<span class="regex-highlight keyword">var</span> hello = <span class="regex-highlight keyword">new</span> <span class="regex-highlight class">Hell</span>();
<span class="regex-highlight keyword">var</span> h = <span class="regex-highlight class">Hello</span>();
<span class="regex-highlight keyword">var</span> h = Hello;
<span class="regex-highlight class">Hello</span>();
Hello;
<span class="regex-highlight keyword">class</span> <span class="regex-highlight class">Hello</span> {}
<span class="regex-highlight keyword">var</span> Hello = <span class="regex-highlight keyword">function</span> <span class="regex-highlight class">Hello</span>() {
    <span class="regex-highlight function">constructor</span>() {
        console.<span class="regex-highlight function">log</span>(<span class="regex-highlight wrapping">"Hello World!"</span>);
    }
}

<span class="regex-highlight comment">// COMMENTS AND WRAPPINGS TESTING</span>
<span class="regex-highlight wrapping">"Wrapping"</span>
<span class="regex-highlight comment">/*multi
line comment correct*/</span>
<span class="regex-highlight comment">/*multi
line comment with wrapping "hello" correct*/</span>
<span class="regex-highlight wrapping">"Wrapping with --comment inside"</span>
<span class="regex-highlight wrapping">"Wrapping which has been\" escaped "</span>
<span class="regex-highlight wrapping">"Number 1 inside wrapping"</span>
<span class="regex-highlight comment">// comment which "has a wrapping"</span>
<span class="regex-highlight wrapping">"String1"</span> + <span class="regex-highlight wrapping">"String2"</span>
