<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">bpy</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">bpy.ops</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">copy</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">mathutils</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">bmesh</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">bmesh.ops</span>
<span class="regex-highlight keyword">import</span> <span class="regex-highlight import">os</span>
<span class="regex-highlight keyword">from</span> <span class="regex-highlight import">time</span> <span class="regex-highlight keyword">import</span> <span class="regex-highlight import">time</span>
<span class="regex-highlight keyword">from</span> <span class="regex-highlight import">math</span> <span class="regex-highlight keyword">import</span> <span class="regex-highlight import">radians, pi, ceil</span>
<span class="regex-highlight keyword">from</span> <span class="regex-highlight import">random</span> <span class="regex-highlight keyword">import</span> <span class="regex-highlight import">seed, random, randint, uniform</span>
<span class="regex-highlight keyword">from</span> <span class="regex-highlight import">mathutils</span> <span class="regex-highlight keyword">import</span> <span class="regex-highlight import">Vector, Quaternion</span>
<span class="regex-highlight keyword">from</span> <span class="regex-highlight import">bpy.props</span> <span class="regex-highlight keyword">import</span> <span class="regex-highlight import">FloatProperty, BoolProperty, IntProperty, StringProperty</span>

create_cylinder = bpy.<span class="regex-highlight variable">ops</span>.<span class="regex-highlight variable">mesh</span>.<span class="regex-highlight variable">primitive_cylinder_add</span>
create_plane = bpy.<span class="regex-highlight variable">ops</span>.<span class="regex-highlight variable">mesh</span>.<span class="regex-highlight variable">primitive_plane_add</span>
scale = bmesh.<span class="regex-highlight variable">ops</span>.<span class="regex-highlight variable">scale</span>

bl_info = {
    <span class="regex-highlight wrapping">"name"</span>: <span class="regex-highlight wrapping">"Tree Creator"</span>,
    <span class="regex-highlight wrapping">"author"</span>: <span class="regex-highlight wrapping">"Student 14027009"</span>,
    <span class="regex-highlight wrapping">"version"</span>: (<span class="regex-highlight number">1</span>, <span class="regex-highlight number">0</span>, <span class="regex-highlight number">0</span>),
    <span class="regex-highlight wrapping">"location"</span>: <span class="regex-highlight wrapping">"View 3D &gt; Object Mode &gt; Tool Shelf"</span>,
    <span class="regex-highlight wrapping">"description"</span>: <span class="regex-highlight wrapping">"Generate a tree mesh from information supplied in the properties pane"</span>,
    <span class="regex-highlight wrapping">"category"</span>: <span class="regex-highlight wrapping">"Add Mesh"</span>
}


<span class="regex-highlight comment"># ------------------------------------------------------------ #</span>
<span class="regex-highlight comment">#                           UTILS                              #</span>
<span class="regex-highlight comment"># ------------------------------------------------------------ #</span>
<span class="regex-highlight keyword">def</span> <span class="regex-highlight function">load_texture</span>(filepath):
    <span class="regex-highlight wrapping">""</span><span class="regex-highlight wrapping">"Loads the texture at filepath then returns the loaded image"</span><span class="regex-highlight wrapping">""</span>
    <span class="regex-highlight keyword">try</span>:
        img = bpy.<span class="regex-highlight variable">data</span>.<span class="regex-highlight variable">images</span>.<span class="regex-highlight function">load</span>(filepath)
        <span class="regex-highlight keyword">return</span> img
    <span class="regex-highlight keyword">except</span>:
        <span class="regex-highlight keyword">raise</span> <span class="regex-highlight function">NameError</span>(<span class="regex-highlight wrapping">"No image was found at this location: {}"</span>.<span class="regex-highlight function">format</span>(filepath))


<span class="regex-highlight keyword">def</span> <span class="regex-highlight function">find_upper_face</span>(bm, lowest=<span class="regex-highlight literal-value">True</span>):
    <span class="regex-highlight wrapping">""</span><span class="regex-highlight wrapping">"
    This function will return the face which is at the
    lowest location in the mesh by default, otherwise it will
    return the highest face in the z axis

    Variables:
    :param bm: BMesh for the object
    :param lowest: A boolean whether or not it should return the lower face or the higher face

    :return a BMFace object
    "</span><span class="regex-highlight wrapping">""</span>
    lowest_face = <span class="regex-highlight literal-value">None</span>
    lowest_face_location = <span class="regex-highlight literal-value">None</span>
    <span class="regex-highlight keyword">for</span> face <span class="regex-highlight keyword">in</span> bm.<span class="regex-highlight variable">faces</span>:
        location = face.<span class="regex-highlight function">calc_center_median</span>()
        <span class="regex-highlight keyword">if</span> lowest_face:
            <span class="regex-highlight comment"># Search for lowest face in z</span>
            <span class="regex-highlight keyword">if</span> lowest:
                <span class="regex-highlight keyword">if</span> lowest_face_location.<span class="regex-highlight variable">z</span> &gt; location.<span class="regex-highlight variable">z</span>:
                    lowest_face = face
                    lowest_face_location = location
            <span class="regex-highlight comment"># Search for highest face in z</span>
            <span class="regex-highlight keyword">else</span>:
                <span class="regex-highlight keyword">if</span> lowest_face_location.<span class="regex-highlight variable">z</span> &lt; location.<span class="regex-highlight variable">z</span>:
                    lowest_face = face
                    lowest_face_location = location
        <span class="regex-highlight comment"># Set the first lowestFace</span>
        <span class="regex-highlight keyword">else</span>:
            lowest_face = face
            lowest_face_location = location
    <span class="regex-highlight keyword">return</span> lowest_face
