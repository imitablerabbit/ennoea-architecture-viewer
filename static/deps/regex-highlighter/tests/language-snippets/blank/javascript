// GENERAL TESTING
/**
* A class for the Regex Highlighter
* @author Mark Hillman &lt;mark@markhillman.info&gt;
* @class
*
*   @param {string} [returnClassName] - The class name to add to the span tags
*       once a pattern has been matched
*/
var RegexHighlighter = function(returnClassName) {
    this.returnClassName = returnClassName;
    if (typeof this.returnClassName === "undefined")
        this.returnClassName = "regex-highlight";
}

/**
* A function to sort the values of the passed in array, first by their indicies
* then by their precedence.
* @author Mark Hillman &lt;mark@markhillman.info&gt;
*
*   @param {Match[]} array - Array of regex match objects
*/
RegexHighlighter.prototype.sortArrayByObjectsIndex = function(array) {
    array.sort(function compareObj(a, b) {
        if (a.index == b.index)
            return a.precedence - b.precedence;
        else
            return a.index - b.index;
    });
}

/**
* Remove duplicate objects from the array using a function passed into this
* function. The array should contain Regex match objects and the shouldRemove
* function should work in a similar way to a compare function in most
* imperative languages. This means that &lt;0 will remove the item on the left,
* &gt;0 will remove the item on the right. 0 will not remove anything
* @author Mark Hillman &lt;mark@markhillman.info&gt;
*
*   @param {Match[]} array - The array which will have its duplicate items
*       removed from
*   @param {function} shouldRemove - A callback function to decide what will be removed
*/
RegexHighlighter.prototype.removeDuplicateObjectsFromArray = function(array, shouldRemove) {
    for (var i = 1; i &lt; array.length; i++) {
        var side = shouldRemove(array[i-1], array[i]);
        if (side != 0) {
            if (side &lt; 0) {
                array.splice(i-1, 1);
                i--;
            }
            else {
                array.splice(i, 1);
                i--;
            }
        }
    }
}

function withNumbers99() {
    return 0;
}

// NUMBER TESTING
1
12
1.1212
1.121.12
.12
..121
01.

// VARIABLE TESTING
object.hello;
h.x;
h.x
object.variable = 3;
object.variable.variable = 3;
object.factorial(2);
.variable
x.1
hello.1nf

// FUNCTION TESTING
this.functionName();
functionName();
functionName(args);
functionName(functionName());
functionName ();
functionName
();
0functionName()

// KEYWORDS
do, if, in, for, let, new, try, var, case, else, enum, eval, this, void, with, await, break, catch, class, const, super, throw, while, yield, delete, export, import, public, return, static, switch, typeof, default, extends, finally, package, private, continue, debugger, function, arguments, interface, protected, implements, instanceof

// LITERAL VALUES
null, true, false

// CLASS TESTING
var hello = new Hell();
var h = Hello();
var h = Hello;
Hello();
Hello;
class Hello {}
var Hello = function Hello() {
    constructor() {
        console.log("Hello World!");
    }
}

// COMMENTS AND WRAPPINGS TESTING
"Wrapping"
/*multi
line comment correct*/
/*multi
line comment with wrapping "hello" correct*/
"Wrapping with --comment inside"
"Wrapping which has been\" escaped "
"Number 1 inside wrapping"
// comment which "has a wrapping"
"String1" + "String2"
