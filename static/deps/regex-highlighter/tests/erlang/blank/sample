-module(ring).
-export([]).

-compile(export_all).

create_ring(0) -&gt; [];
create_ring(N) -&gt;
	[spawn(ring, ring_element, []) | create_ring(N-1)].

% ring_element will handle the passing of a message to the
% next process in the ring. This happens until the message
% reaches the end of the ring.
ring_element() -&gt;
	receive
		{From, {N, Ring, Message, Iter}} when N =&lt; length(Ring) -&gt;
			Pid = lists:nth(N, Ring),
			Pid ! {From, {N+1, Ring, Message, Iter}},
			ring_element();
		{From, {N, Ring, Message, Iter}} when N &gt; length(Ring) -&gt;
			if
				Iter &gt; 0 -&gt;
					Pid = hd(Ring),
					Pid ! {From, {2, Ring, Message, Iter-1}},
					ring_element();
				Iter =:= 0 -&gt;
					Pid = lists:nth(length(Ring), Ring),
					From ! {Pid, Message},
					ring_element()
			end
	end.